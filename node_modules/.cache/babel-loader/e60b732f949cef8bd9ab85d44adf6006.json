{"ast":null,"code":"import React from 'react';\nimport { useThemeUI, ThemeProvider as ThemeProvider$1, jsx, __themeUiDefaultContextValue } from '@theme-ui/core';\nimport { css } from '@theme-ui/css';\nimport { ColorModeProvider } from '@theme-ui/color-modes';\nimport { MDXProvider } from '@theme-ui/mdx';\nimport { Global } from '@emotion/react';\n\nconst RootStyles = () => jsx(Global, {\n  styles: emotionTheme => {\n    var _theme$config;\n\n    const theme = emotionTheme;\n    const {\n      useRootStyles\n    } = theme.config || theme;\n\n    if (useRootStyles === false || theme.styles && !theme.styles.root) {\n      return null;\n    }\n\n    const boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? undefined : 'border-box';\n    return css({\n      '*': {\n        boxSizing\n      },\n      html: {\n        variant: 'styles.root'\n      },\n      body: {\n        margin: 0\n      }\n    })(theme);\n  }\n});\n\nconst ThemeProvider = _ref => {\n  let {\n    theme,\n    components,\n    children\n  } = _ref;\n  const outer = useThemeUI();\n  const isTopLevel = outer === __themeUiDefaultContextValue;\n  return /*#__PURE__*/React.createElement(ThemeProvider$1, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, null, isTopLevel && /*#__PURE__*/React.createElement(RootStyles, null), /*#__PURE__*/React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\n\nexport { ThemeProvider };","map":{"version":3,"sources":["/Users/learnyst/Desktop/Practice_Website_Builder/web-build-ui-v1/node_modules/@theme-ui/theme-provider/dist/theme-ui-theme-provider.esm.js"],"names":["React","useThemeUI","ThemeProvider","ThemeProvider$1","jsx","__themeUiDefaultContextValue","css","ColorModeProvider","MDXProvider","Global","RootStyles","styles","emotionTheme","_theme$config","theme","useRootStyles","config","root","boxSizing","useBorderBox","undefined","html","variant","body","margin","components","children","outer","isTopLevel","createElement"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,aAAa,IAAIC,eAAtC,EAAuDC,GAAvD,EAA4DC,4BAA5D,QAAgG,gBAAhG;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,gBAAvB;;AAEA,MAAMC,UAAU,GAAG,MAAMN,GAAG,CAACK,MAAD,EAAS;AACnCE,EAAAA,MAAM,EAAEC,YAAY,IAAI;AACtB,QAAIC,aAAJ;;AAEA,UAAMC,KAAK,GAAGF,YAAd;AACA,UAAM;AACJG,MAAAA;AADI,QAEFD,KAAK,CAACE,MAAN,IAAgBF,KAFpB;;AAIA,QAAIC,aAAa,KAAK,KAAlB,IAA2BD,KAAK,CAACH,MAAN,IAAgB,CAACG,KAAK,CAACH,MAAN,CAAaM,IAA7D,EAAmE;AACjE,aAAO,IAAP;AACD;;AAED,UAAMC,SAAS,GAAG,CAAC,CAACL,aAAa,GAAGC,KAAK,CAACE,MAAvB,KAAkC,IAAlC,GAAyC,KAAK,CAA9C,GAAkDH,aAAa,CAACM,YAAjE,MAAmF,KAAnF,GAA2FC,SAA3F,GAAuG,YAAzH;AACA,WAAOd,GAAG,CAAC;AACT,WAAK;AACHY,QAAAA;AADG,OADI;AAITG,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL,OAJG;AAOTC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE;AADJ;AAPG,KAAD,CAAH,CAUJV,KAVI,CAAP;AAWD;AAzBkC,CAAT,CAA5B;;AA4BA,MAAMZ,aAAa,GAAG,QAIhB;AAAA,MAJiB;AACrBY,IAAAA,KADqB;AAErBW,IAAAA,UAFqB;AAGrBC,IAAAA;AAHqB,GAIjB;AACJ,QAAMC,KAAK,GAAG1B,UAAU,EAAxB;AACA,QAAM2B,UAAU,GAAGD,KAAK,KAAKtB,4BAA7B;AACA,SAAO,aAAaL,KAAK,CAAC6B,aAAN,CAAoB1B,eAApB,EAAqC;AACvDW,IAAAA,KAAK,EAAEA;AADgD,GAArC,EAEjB,aAAad,KAAK,CAAC6B,aAAN,CAAoBtB,iBAApB,EAAuC,IAAvC,EAA6CqB,UAAU,IAAI,aAAa5B,KAAK,CAAC6B,aAAN,CAAoBnB,UAApB,EAAgC,IAAhC,CAAxE,EAA+G,aAAaV,KAAK,CAAC6B,aAAN,CAAoBrB,WAApB,EAAiC;AAC3KiB,IAAAA,UAAU,EAAEA;AAD+J,GAAjC,EAEzIC,QAFyI,CAA5H,CAFI,CAApB;AAKD,CAZD;;AAcA,SAASxB,aAAT","sourcesContent":["import React from 'react';\nimport { useThemeUI, ThemeProvider as ThemeProvider$1, jsx, __themeUiDefaultContextValue } from '@theme-ui/core';\nimport { css } from '@theme-ui/css';\nimport { ColorModeProvider } from '@theme-ui/color-modes';\nimport { MDXProvider } from '@theme-ui/mdx';\nimport { Global } from '@emotion/react';\n\nconst RootStyles = () => jsx(Global, {\n  styles: emotionTheme => {\n    var _theme$config;\n\n    const theme = emotionTheme;\n    const {\n      useRootStyles\n    } = theme.config || theme;\n\n    if (useRootStyles === false || theme.styles && !theme.styles.root) {\n      return null;\n    }\n\n    const boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? undefined : 'border-box';\n    return css({\n      '*': {\n        boxSizing\n      },\n      html: {\n        variant: 'styles.root'\n      },\n      body: {\n        margin: 0\n      }\n    })(theme);\n  }\n});\n\nconst ThemeProvider = ({\n  theme,\n  components,\n  children\n}) => {\n  const outer = useThemeUI();\n  const isTopLevel = outer === __themeUiDefaultContextValue;\n  return /*#__PURE__*/React.createElement(ThemeProvider$1, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, null, isTopLevel && /*#__PURE__*/React.createElement(RootStyles, null), /*#__PURE__*/React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\n\nexport { ThemeProvider };\n"]},"metadata":{},"sourceType":"module"}