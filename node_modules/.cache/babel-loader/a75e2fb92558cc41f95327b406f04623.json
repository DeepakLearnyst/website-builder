{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo, useLayoutEffect } from 'react';\nimport { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\n\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\n\nconst toVarValue = key => `var(${toVarName(key)})`;\n\nconst join = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.filter(Boolean).join('-');\n};\n\nconst reservedKeys = new Set(['useCustomProperties', 'initialColorModeName', 'printColorModeName', 'initialColorMode', 'useLocalStorage', 'config']); // convert theme values to custom properties\n\nconst toCustomProperties = (obj, parent) => {\n  const next = Array.isArray(obj) ? [] : {};\n\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n\n    if (reservedKeys.has(key)) {\n      next[key] = value;\n      continue;\n    }\n\n    next[key] = toVarValue(name);\n  }\n\n  return next;\n};\n/**\n * @internal\n * Recursively transforms an object into CSS variables excluding \"modes\" key.\n */\n\n\nconst __objectToVars = (parent, obj) => {\n  let vars = {};\n\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = { ...vars,\n        ...__objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n};\n/**\n * @internal\n * Creates root styles for color modes.\n * - Transforms color scale into CSS variables.\n * - Sets background and text color.\n */\n\n\nconst __createColorStyles = function () {\n  let theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n\n  if (useCustomProperties === false) {\n    return css({\n      color: 'text',\n      bg: 'background'\n    })(theme);\n  }\n\n  const modes = colors.modes || {};\n\n  const styles = __createColorProperties(colors, modes);\n\n  if (printColorModeName) {\n    const mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = __objectToVars('colors', mode);\n  }\n\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n\n  return css({ ...styles,\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  })(theme);\n};\n/**\n * @internal\n * Returns an object with colors turned into Custom CSS Properties and\n * .theme-ui-<colormode> classes used for no-flash serverside rendering.\n */\n\n\nfunction __createColorProperties(colors, modes) {\n  const styles = __objectToVars('colors', colors);\n\n  Object.keys(modes).forEach(mode => {\n    const className = `.theme-ui-${mode}`;\n    const key = `&${className}, ${className} &`;\n    styles[key] = __objectToVars('colors', modes[mode]);\n  });\n  return styles;\n}\n\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst DARK_QUERY = '(prefers-color-scheme: dark)';\nconst LIGHT_QUERY = '(prefers-color-scheme: light)';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  }\n};\n\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia(DARK_QUERY).matches) {\n      return 'dark';\n    }\n\n    if (window.matchMedia(LIGHT_QUERY).matches) {\n      return 'light';\n    }\n  }\n\n  return null;\n};\n\nconst useClientsideEffect = typeof window === 'undefined' ? () => {} : useLayoutEffect;\n\nconst TopLevelColorModeProvider = _ref => {\n  let {\n    outerCtx,\n    children\n  } = _ref;\n  const outerTheme = outerCtx.theme || {};\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = outerTheme.config || outerTheme;\n  let [colorMode, setColorMode] = useState(() => {\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  }); // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n\n  useClientsideEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n    }\n\n    if (useColorSchemeMediaQuery !== 'system' && stored && stored !== colorMode) {\n      colorMode = stored;\n      setColorMode(stored);\n    }\n  }, []); // when mode changes, we save it to localStorage\n\n  useEffect(() => {\n    if (colorMode && useLocalStorage !== false) {\n      storage.set(colorMode);\n    }\n  }, [colorMode, useLocalStorage]);\n  const setPreferredColorScheme = useCallback(() => {\n    const preferredColorScheme = getPreferredColorScheme();\n    setColorMode(preferredColorScheme || initialColorModeName);\n  }, [initialColorModeName]);\n  useEffect(() => {\n    if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n      // It doesn't matter if we add the listener only to the dark media query\n      // Because in our callback function we'll check for both media queries (light and dark).\n      const darkMQL = window.matchMedia(DARK_QUERY);\n\n      if (typeof darkMQL.addEventListener === 'function') {\n        darkMQL.addEventListener('change', setPreferredColorScheme);\n      } else if (typeof darkMQL.addListener === 'function') {\n        darkMQL.addListener(setPreferredColorScheme);\n      }\n    }\n\n    return () => {\n      if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n        const darkMQL = window.matchMedia(DARK_QUERY);\n\n        if (typeof darkMQL.removeEventListener === 'function') {\n          darkMQL.removeEventListener('change', setPreferredColorScheme);\n        } else if (typeof darkMQL.removeListener === 'function') {\n          darkMQL.removeListener(setPreferredColorScheme);\n        }\n      }\n    };\n  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var _outerTheme$colors;\n\n    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  const newTheme = useThemeWithAppliedColorMode({\n    colorMode,\n    outerTheme\n  });\n  const newCtx = { ...outerCtx,\n    theme: newTheme,\n    colorMode,\n    setColorMode\n  };\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: newCtx\n  }, /*#__PURE__*/React.createElement(GlobalColorStyles, {\n    theme: newTheme\n  }), children);\n};\n\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n\n  return [colorMode, setColorMode];\n}\n\nconst omitModes = colors => {\n  const res = { ...colors\n  };\n  delete res.modes;\n  return res;\n};\n\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    } else if (typeof value === 'object') {\n      const newValue = { ...outerThemeRawColors[key]\n      };\n      copyRawColors(value, newValue);\n      outerThemeRawColors[key] = newValue;\n    }\n  }\n}\n\nfunction useThemeWithAppliedColorMode(_ref2) {\n  let {\n    outerTheme,\n    colorMode\n  } = _ref2;\n  const theme = useMemo(() => {\n    const res = { ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n\n    if (colorMode) {\n      res.colors = { ...res.colors,\n        ...currentColorMode\n      };\n    }\n\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = { ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n\n        if (outerThemeRawColors.modes) {\n          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);\n        }\n\n        res.rawColors = outerThemeRawColors;\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = { ...colors,\n            modes\n          };\n          /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n\n    return res;\n  }, [colorMode, outerTheme]);\n  return theme;\n}\n\nfunction GlobalColorStyles(_ref3) {\n  let {\n    theme\n  } = _ref3;\n  return jsx(Global, {\n    styles: () => {\n      return {\n        html: __createColorStyles(theme)\n      };\n    }\n  });\n}\n\nfunction NestedColorModeProvider(_ref4) {\n  let {\n    outerCtx,\n    children\n  } = _ref4;\n\n  var _newTheme$config2;\n\n  const newTheme = useThemeWithAppliedColorMode({\n    outerTheme: outerCtx.theme,\n    colorMode: outerCtx.colorMode\n  }); // Nested theme providers need to be rerendered after hydration for the correct\n  // color mode to apply.\n\n  const [needsRerender, setNeedsRerender] = useState( // Note: we could also check some \"ssr-enabled\" flag as an optimization for\n  // SPAs, as deeply nested theme providers will also pay a performance penalty\n  // for this SSR bug fix\n  () => {\n    var _newTheme$config;\n\n    return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;\n  });\n  useClientsideEffect(() => void setNeedsRerender(false), []);\n  const themeColors = newTheme.rawColors || newTheme.colors;\n  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;\n  const colorVars = useMemo(() => {\n    if (useCustomProperties === false) {\n      return {};\n    }\n\n    const colors = themeColors || {};\n    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);\n  }, [newTheme, themeColors, useCustomProperties]);\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: { ...outerCtx,\n      theme: newTheme\n    }\n  }, jsx('div', {\n    'data-themeui-nested-provider': true,\n    // the key here ensures that children will be rerendered after color\n    // mode is read from localStorage\n    key: Number(needsRerender),\n    suppressHydrationWarning: true,\n    css: colorVars,\n    children\n  }));\n}\n\nconst ColorModeProvider = _ref5 => {\n  let {\n    children\n  } = _ref5;\n  const outerCtx = useThemeUI();\n  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== 'function';\n  return isTopLevelColorModeProvider ? /*#__PURE__*/React.createElement(TopLevelColorModeProvider, {\n    outerCtx: outerCtx\n  }, children) : /*#__PURE__*/React.createElement(NestedColorModeProvider, {\n    outerCtx: outerCtx\n  }, children);\n};\n\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\n\nconst InitializeColorMode = () => jsx('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };","map":{"version":3,"sources":["/Users/learnyst/Desktop/Practice Website Builder/web-build/node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js"],"names":["React","useState","useEffect","useCallback","useMemo","useLayoutEffect","useThemeUI","jsx","__ThemeUIInternalBaseThemeProvider","css","get","Global","toVarName","key","replace","toVarValue","join","args","filter","Boolean","reservedKeys","Set","toCustomProperties","obj","parent","next","Array","isArray","value","name","has","__objectToVars","vars","__createColorStyles","theme","useCustomProperties","initialColorModeName","printColorModeName","useRootStyles","config","colors","rawColors","color","bg","modes","styles","__createColorProperties","mode","colorToVarValue","Object","keys","forEach","className","STORAGE_KEY","DARK_QUERY","LIGHT_QUERY","storage","window","localStorage","getItem","err","console","warn","set","setItem","getPreferredColorScheme","matchMedia","matches","useClientsideEffect","TopLevelColorModeProvider","outerCtx","children","outerTheme","useColorSchemeMediaQuery","useLocalStorage","colorMode","setColorMode","preferredMode","stored","document","documentElement","classList","remove","setPreferredColorScheme","preferredColorScheme","darkMQL","addEventListener","addListener","removeEventListener","removeListener","process","env","NODE_ENV","_outerTheme$colors","indexOf","newTheme","useThemeWithAppliedColorMode","newCtx","createElement","context","GlobalColorStyles","useColorMode","Error","omitModes","res","copyRawColors","outerThemeRawColors","entries","startsWith","newValue","currentColorMode","alreadyHasRawColors","html","NestedColorModeProvider","_newTheme$config2","needsRerender","setNeedsRerender","_newTheme$config","themeColors","colorVars","Number","suppressHydrationWarning","ColorModeProvider","isTopLevelColorModeProvider","noflash","InitializeColorMode","dangerouslySetInnerHTML","__html"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useLayoutEffect } from 'react';\nimport { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\n\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\n\nconst toVarValue = key => `var(${toVarName(key)})`;\n\nconst join = (...args) => args.filter(Boolean).join('-');\n\nconst reservedKeys = new Set(['useCustomProperties', 'initialColorModeName', 'printColorModeName', 'initialColorMode', 'useLocalStorage', 'config']); // convert theme values to custom properties\n\nconst toCustomProperties = (obj, parent) => {\n  const next = Array.isArray(obj) ? [] : {};\n\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n\n    if (reservedKeys.has(key)) {\n      next[key] = value;\n      continue;\n    }\n\n    next[key] = toVarValue(name);\n  }\n\n  return next;\n};\n/**\n * @internal\n * Recursively transforms an object into CSS variables excluding \"modes\" key.\n */\n\nconst __objectToVars = (parent, obj) => {\n  let vars = {};\n\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = { ...vars,\n        ...__objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n};\n/**\n * @internal\n * Creates root styles for color modes.\n * - Transforms color scale into CSS variables.\n * - Sets background and text color.\n */\n\nconst __createColorStyles = (theme = {}) => {\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n\n  if (useCustomProperties === false) {\n    return css({\n      color: 'text',\n      bg: 'background'\n    })(theme);\n  }\n\n  const modes = colors.modes || {};\n\n  const styles = __createColorProperties(colors, modes);\n\n  if (printColorModeName) {\n    const mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = __objectToVars('colors', mode);\n  }\n\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n\n  return css({ ...styles,\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  })(theme);\n};\n/**\n * @internal\n * Returns an object with colors turned into Custom CSS Properties and\n * .theme-ui-<colormode> classes used for no-flash serverside rendering.\n */\n\nfunction __createColorProperties(colors, modes) {\n  const styles = __objectToVars('colors', colors);\n\n  Object.keys(modes).forEach(mode => {\n    const className = `.theme-ui-${mode}`;\n    const key = `&${className}, ${className} &`;\n    styles[key] = __objectToVars('colors', modes[mode]);\n  });\n  return styles;\n}\n\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst DARK_QUERY = '(prefers-color-scheme: dark)';\nconst LIGHT_QUERY = '(prefers-color-scheme: light)';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  }\n};\n\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia(DARK_QUERY).matches) {\n      return 'dark';\n    }\n\n    if (window.matchMedia(LIGHT_QUERY).matches) {\n      return 'light';\n    }\n  }\n\n  return null;\n};\n\nconst useClientsideEffect = typeof window === 'undefined' ? () => {} : useLayoutEffect;\n\nconst TopLevelColorModeProvider = ({\n  outerCtx,\n  children\n}) => {\n  const outerTheme = outerCtx.theme || {};\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = outerTheme.config || outerTheme;\n  let [colorMode, setColorMode] = useState(() => {\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  }); // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n\n  useClientsideEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n    }\n\n    if (useColorSchemeMediaQuery !== 'system' && stored && stored !== colorMode) {\n      colorMode = stored;\n      setColorMode(stored);\n    }\n  }, []); // when mode changes, we save it to localStorage\n\n  useEffect(() => {\n    if (colorMode && useLocalStorage !== false) {\n      storage.set(colorMode);\n    }\n  }, [colorMode, useLocalStorage]);\n  const setPreferredColorScheme = useCallback(() => {\n    const preferredColorScheme = getPreferredColorScheme();\n    setColorMode(preferredColorScheme || initialColorModeName);\n  }, [initialColorModeName]);\n  useEffect(() => {\n    if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n      // It doesn't matter if we add the listener only to the dark media query\n      // Because in our callback function we'll check for both media queries (light and dark).\n      const darkMQL = window.matchMedia(DARK_QUERY);\n\n      if (typeof darkMQL.addEventListener === 'function') {\n        darkMQL.addEventListener('change', setPreferredColorScheme);\n      } else if (typeof darkMQL.addListener === 'function') {\n        darkMQL.addListener(setPreferredColorScheme);\n      }\n    }\n\n    return () => {\n      if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n        const darkMQL = window.matchMedia(DARK_QUERY);\n\n        if (typeof darkMQL.removeEventListener === 'function') {\n          darkMQL.removeEventListener('change', setPreferredColorScheme);\n        } else if (typeof darkMQL.removeListener === 'function') {\n          darkMQL.removeListener(setPreferredColorScheme);\n        }\n      }\n    };\n  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var _outerTheme$colors;\n\n    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  const newTheme = useThemeWithAppliedColorMode({\n    colorMode,\n    outerTheme\n  });\n  const newCtx = { ...outerCtx,\n    theme: newTheme,\n    colorMode,\n    setColorMode\n  };\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: newCtx\n  }, /*#__PURE__*/React.createElement(GlobalColorStyles, {\n    theme: newTheme\n  }), children);\n};\n\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n\n  return [colorMode, setColorMode];\n}\n\nconst omitModes = colors => {\n  const res = { ...colors\n  };\n  delete res.modes;\n  return res;\n};\n\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    } else if (typeof value === 'object') {\n      const newValue = { ...outerThemeRawColors[key]\n      };\n      copyRawColors(value, newValue);\n      outerThemeRawColors[key] = newValue;\n    }\n  }\n}\n\nfunction useThemeWithAppliedColorMode({\n  outerTheme,\n  colorMode\n}) {\n  const theme = useMemo(() => {\n    const res = { ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n\n    if (colorMode) {\n      res.colors = { ...res.colors,\n        ...currentColorMode\n      };\n    }\n\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = { ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n\n        if (outerThemeRawColors.modes) {\n          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);\n        }\n\n        res.rawColors = outerThemeRawColors;\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = { ...colors,\n            modes\n          };\n          /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n\n    return res;\n  }, [colorMode, outerTheme]);\n  return theme;\n}\n\nfunction GlobalColorStyles({\n  theme\n}) {\n  return jsx(Global, {\n    styles: () => {\n      return {\n        html: __createColorStyles(theme)\n      };\n    }\n  });\n}\n\nfunction NestedColorModeProvider({\n  outerCtx,\n  children\n}) {\n  var _newTheme$config2;\n\n  const newTheme = useThemeWithAppliedColorMode({\n    outerTheme: outerCtx.theme,\n    colorMode: outerCtx.colorMode\n  }); // Nested theme providers need to be rerendered after hydration for the correct\n  // color mode to apply.\n\n  const [needsRerender, setNeedsRerender] = useState( // Note: we could also check some \"ssr-enabled\" flag as an optimization for\n  // SPAs, as deeply nested theme providers will also pay a performance penalty\n  // for this SSR bug fix\n  () => {\n    var _newTheme$config;\n\n    return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;\n  });\n  useClientsideEffect(() => void setNeedsRerender(false), []);\n  const themeColors = newTheme.rawColors || newTheme.colors;\n  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;\n  const colorVars = useMemo(() => {\n    if (useCustomProperties === false) {\n      return {};\n    }\n\n    const colors = themeColors || {};\n    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);\n  }, [newTheme, themeColors, useCustomProperties]);\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: { ...outerCtx,\n      theme: newTheme\n    }\n  }, jsx('div', {\n    'data-themeui-nested-provider': true,\n    // the key here ensures that children will be rerendered after color\n    // mode is read from localStorage\n    key: Number(needsRerender),\n    suppressHydrationWarning: true,\n    css: colorVars,\n    children\n  }));\n}\n\nconst ColorModeProvider = ({\n  children\n}) => {\n  const outerCtx = useThemeUI();\n  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== 'function';\n  return isTopLevelColorModeProvider ? /*#__PURE__*/React.createElement(TopLevelColorModeProvider, {\n    outerCtx: outerCtx\n  }, children) : /*#__PURE__*/React.createElement(NestedColorModeProvider, {\n    outerCtx: outerCtx\n  }, children);\n};\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\nconst InitializeColorMode = () => jsx('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };\n"]},"metadata":{},"sourceType":"module"}